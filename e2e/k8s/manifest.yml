apiVersion: v1
kind: Secret
metadata:
  name: tls
type: kubernetes.io/tls
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNpVENDQWk2Z0F3SUJBZ0lVT2djYmdRVkNG
    T3EzakVIRno0MFBzYytpWUVNd0NnWUlLb1pJemowRUF3SXcKZURFTE1Ba0dBMVVFQmhNQ1ZWTXhF
    ekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFZOaApiaUJHY21GdVkybHpZ
    Mjh4SHpBZEJnTlZCQW9URmtsdWRHVnlibVYwSUZkcFpHZGxkSE1zSUVsdVl5NHhEREFLCkJnTlZC
    QXNUQTFkWFZ6RU5NQXNHQTFVRUF4TUVkR1Z6ZERBZUZ3MHlOVEExTVRFeU1ERXpNREJhRncwek5U
    QTEKTURreU1ERXpNREJhTUZVeEN6QUpCZ05WQkFZVEFsVlRNUTR3REFZRFZRUUlFd1ZVWlhoaGN6
    RVBNQTBHQTFVRQpCeE1HUkdGc2JHRnpNUmN3RlFZRFZRUUtFdzVOZVNCRFpYSjBhV1pwWTJGMFpU
    RU1NQW9HQTFVRUN4TURWMWRYCk1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXJF
    cXVCa2ZKdzUvTVBkWWI3ZWZUQjZEQUZrV28KSDY1aDNySnlLMXdJMTVxTGhJY0hEMHgrc08zY29q
    enU0Q0hyT0ZoYVpJYXdhTWtsYzJnYjVEaWxRNk9CdURDQgp0VEFPQmdOVkhROEJBZjhFQkFNQ0Jh
    QXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3REFZRFZSMFRBUUgvCkJBSXdBREFkQmdOVkhR
    NEVGZ1FVVW15bGRtK21GNWFzMjYyUGNicFNTSEZnd0Nrd0h3WURWUjBqQkJnd0ZvQVUKSWs5NmNJ
    YXRGU0FaM1BXWEZ1a1NscCs5N2Rjd1FBWURWUjBSQkRrd040SUpiRzlqWVd4b2IzTjBod1IvQUFB
    QgpoaEZvZEhSd2N6b3ZMMnh2WTJGc2FHOXpkSVlSYUhSMGNITTZMeTh4TWpjdU1DNHdMakV3Q2dZ
    SUtvWkl6ajBFCkF3SURTUUF3UmdJaEFOcU91T3ZYaXBZeDkzTHVrcnk1blUvOUdvRmNKc1cweUZ1
    NGd4SDBFcTcyQWlFQTZsZkwKUDdMSWFOc3NCeUo3clBtcm9Nd01iZ3N3LzB3dzE2NUhZUGpRcHI4
    PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: |
    LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUtuVlYrRGlaa0hTMjdtd01w
    R2FTME9uN1FSTFpONkRGaHZ3b2xkSUQ1NnVvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFckVxdUJr
    Zkp3NS9NUGRZYjdlZlRCNkRBRmtXb0g2NWgzckp5SzF3STE1cUxoSWNIRDB4KwpzTzNjb2p6dTRD
    SHJPRmhhWklhd2FNa2xjMmdiNURpbFF3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNNekNDQWRxZ0F3SUJBZ0lVU3dyeHozeVRH
    MlgydnoycnNVQmJQL2Noc25Zd0NnWUlLb1pJemowRUF3SXcKZURFTE1Ba0dBMVVFQmhNQ1ZWTXhF
    ekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFZOaApiaUJHY21GdVkybHpZ
    Mjh4SHpBZEJnTlZCQW9URmtsdWRHVnlibVYwSUZkcFpHZGxkSE1zSUVsdVl5NHhEREFLCkJnTlZC
    QXNUQTFkWFZ6RU5NQXNHQTFVRUF4TUVkR1Z6ZERBZUZ3MHlOVEExTVRFeU1ERXpNREJhRncwek5U
    QTEKTURreU1ERXpNREJhTUhneEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFpt
    OXlibWxoTVJZdwpGQVlEVlFRSEV3MVRZVzRnUm5KaGJtTnBjMk52TVI4d0hRWURWUVFLRXhaSmJu
    UmxjbTVsZENCWGFXUm5aWFJ6CkxDQkpibU11TVF3d0NnWURWUVFMRXdOWFYxY3hEVEFMQmdOVkJB
    TVRCSFJsYzNRd1dUQVRCZ2NxaGtqT1BRSUIKQmdncWhrak9QUU1CQndOQ0FBU0VvWkVmOXp5cm9i
    bE0zekVhNnVOQjFRQ2daNVFORTNYaHI0N3hra1hTOTFURQpoMDNkYkljdEVZdThLMHRiQzlZUkZ4
    amVMSTJKRXBTWmlOVEJMUTh0bzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DCkFRWXdEd1lEVlIwVEFR
    SC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVJazk2Y0lhdEZTQVozUFdYRnVrU2xwKzkKN2Rjd0Nn
    WUlLb1pJemowRUF3SURSd0F3UkFJZ1ZPNUZoekdKV0VHK3ZhcUVHSHZWUEZQS1J4MnBXeUlNWWRK
    bApKYVBhN2w0Q0lIc3MwWDE3NTJSZU5EOEZZL05JMTFHa1BWV1phRTFIUHVKMTBTYk9vZyszCi0t
    LS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config
data:
  test.json: |
    {
      "id": "test",
      "realm": "test",
      "displayNameHtml": "",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 30,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 2592000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": true,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": true,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "defaultRoles": [
        "offline_access",
        "uma_authorization"
      ],
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account"
            ]
          }
        ]
      },
      "users": [
          {
              "createdTimestamp" : 1476191007295,
              "username" : "myuser",
              "enabled" : true,
              "totp" : false,
              "emailVerified" : true,
              "firstName" : "Test",
              "lastName" : "Test",
              "email" : "somebody@somewhere.com",
              "credentials" : [
                {
                  "type": "password",
                  "value": "baba1234"
                }
              ],
              "disableableCredentialTypes" : [],
              "requiredActions" : [],
              "federatedIdentities" : [],
              "realmRoles" : [ "offline_access", "uma_authorization", "user" ],
              "clientRoles" : {
                "account" : [ "manage-account", "view-profile" ]
              }
          },
          {
              "createdTimestamp" : 1476191007298,
              "username" : "myloa",
              "enabled" : true,
              "totp" : false,
              "emailVerified" : true,
              "firstName" : "Test",
              "lastName" : "Test",
              "email" : "myloa@somewhere.com",
              "credentials" : [
                {
                  "type": "password",
                  "value": "baba5678"
                },
                {
                  "id" : "8df1ec93-7431-4f9c-9b87-659208887b94",
                  "type" : "otp",
                  "userLabel" : "loa",
                  "createdDate" : 1729510491685,
                  "secretData" : "{\"value\":\"i9Ue8UF9bhWEW9uqFRhb\"}",
                  "credentialData" : "{\"subType\":\"totp\",\"digits\":6,\"counter\":0,\"period\":30,\"algorithm\":\"HmacSHA1\"}"
                }
              ],
              "disableableCredentialTypes" : [],
              "requiredActions" : [],
              "federatedIdentities" : [],
              "realmRoles" : [ "offline_access", "uma_authorization", "user" ],
              "clientRoles" : {
                "account" : [ "manage-account", "view-profile" ]
              }
          }
      ],
      "clients": [
        {
          "id": "fe2c6e97-4810-4873-8adc-6c6c925f22e9",
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/test/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "defaultRoles": [
            "manage-account",
            "view-profile"
          ],
          "redirectUris": [
            "/realms/test/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "id": "e8125288-c6fe-4f97-bafb-7e7f036b24ec",
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/test/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/realms/test/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "bbc845fc-ac29-4587-92a1-3c98e512c5df",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "id": "ee04d1df-8677-4036-91f8-4d0950929095",
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "id": "46a41fde-9eb4-4823-82da-aff5d36333a4",
          "clientId": "broker",
          "name": "${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "id": "51d70e96-4a4c-4fe0-b02d-63c201b777ac",
          "clientId": "realm-management",
          "name": "${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "id": "41ac854f-1193-497e-9768-96c5d3e73a89",
          "clientId": "security-admin-console",
          "name": "${client_security-admin-console}",
          "rootUrl": "${authAdminUrl}",
          "baseUrl": "/admin/test/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/admin/test/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "991dcbc0-95c7-4c04-9db4-ec3f958b487d",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "id": "5a23d75a-21ca-4aa0-84bb-cd3c2efb1ea8",
          "clientId": "test-client",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "6447d0c0-d510-42a7-b654-6e3a16b2d7e2",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [
            "*"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "clientId": "test-client-pkce",
          "name": "",
          "description": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "F2GqU40xwX0P2LrTvHUHqwNoSk4U4n5R",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [
            "*"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "attributes": {
            "oidc.ciba.grant.enabled": "false",
            "oauth2.device.authorization.grant.enabled": "false",
            "client.secret.creation.time": "1691350623",
            "backchannel.logout.session.required": "true",
            "backchannel.logout.revoke.offline.tokens": "false",
            "request.uris": "",
            "acr.loa.map": "{}",
            "pkce.code.challenge.method": "S256",
            "consent.screen.text": "",
            "frontchannel.logout.url": "",
            "backchannel.logout.url": "",
            "login_theme": "",
            "display.on.consent.screen": false,
            "logoUri": "",
            "policyUri": "",
            "tosUri": "",
            "access.token.signed.response.alg": "",
            "id.token.signed.response.alg": "",
            "id.token.encrypted.response.alg": "",
            "id.token.encrypted.response.enc": "",
            "user.info.response.signature.alg": "",
            "request.object.signature.alg": "",
            "request.object.encryption.alg": "",
            "request.object.encryption.enc": "",
            "request.object.required": "",
            "authorization.signed.response.alg": "",
            "authorization.encrypted.response.alg": "",
            "authorization.encrypted.response.enc": "",
            "exclude.session.state.from.auth.response": "",
            "use.refresh.tokens": "true",
            "client_credentials.use_refresh_token": "false",
            "token.response.type.bearer.lower-case": "false",
            "access.token.lifespan": "",
            "tls-client-certificate-bound-access-tokens": false,
            "require.pushed.authorization.requests": "false"
          },
          "authenticationFlowBindingOverrides": {
            "browser": "",
            "direct_grant": ""
          },
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ],
          "access": {
            "view": true,
            "configure": true,
            "manage": true
          },
          "rootUrl": "",
          "baseUrl": "",
          "adminUrl": "",
          "authorizationServicesEnabled": false
        },
        {
          "id": "4c159536-d5d0-42ee-a64b-43d7cb5c1668",
          "clientId": "test-client-uma",
          "name": "",
          "description": "",
          "rootUrl": "",
          "adminUrl": "",
          "baseUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "A5vokiGdI3H2r4aXFrANbKvn4R7cbf6P",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "attributes": {
            "access.token.lifespan": "300",
            "oidc.ciba.grant.enabled": "false",
            "client.secret.creation.time": "1694161560",
            "backchannel.logout.session.required": "true",
            "display.on.consent.screen": "false",
            "oauth2.device.authorization.grant.enabled": "false",
            "backchannel.logout.revoke.offline.tokens": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "53406d38-22ae-4195-87eb-530475e79c06",
              "name": "Client Host",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientHost",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientHost",
                "jsonType.label": "String"
              }
            },
            {
              "id": "506c87aa-d2cc-4342-a2f6-eda5ccb77486",
              "name": "Client ID",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientId",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientId",
                "jsonType.label": "String"
              }
            },
            {
              "id": "8432c797-1111-4b26-b3ea-e49e1cdd9306",
              "name": "Client IP Address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientAddress",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientAddress",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ],
          "authorizationSettings": {
            "allowRemoteResourceManagement": true,
            "policyEnforcementMode": "ENFORCING",
            "resources": [
              {
                "name": "onepet",
                "ownerManagedAccess": true,
                "attributes": {},
                "_id": "90349071-4fbd-49cf-89ff-d7c4a311968b",
                "uris": [
                  "/pets/*"
                ],
                "scopes": [
                  {
                    "name": "mymy"
                  }
                ],
                "icon_uri": ""
              },
              {
                "name": "pets",
                "ownerManagedAccess": true,
                "attributes": {},
                "_id": "f5e11025-0d33-4623-9514-7a9e073d0dc7",
                "uris": [
                  "/pets"
                ],
                "scopes": [
                  {
                    "name": "mymy"
                  }
                ],
                "icon_uri": ""
              },
              {
                "name": "horse",
                "ownerManagedAccess": true,
                "attributes": {},
                "_id": "2b9b6898-3259-4215-9428-52c4d21e438e",
                "uris": [
                  "/horse"
                ],
                "scopes": [
                  {
                    "name": "method:GET"
                  }
                ],
                "icon_uri": ""
              },
              {
                "name": "turtle",
                "ownerManagedAccess": true,
                "attributes": {},
                "_id": "00a7af15-584f-4f09-ad84-2b3f095f1798",
                "uris": [
                  "/turtle"
                ],
                "scopes": [
                  {
                    "name": "method:GET"
                  }
                ],
                "icon_uri": ""
              },
              {
                "name": "dog",
                "ownerManagedAccess": true,
                "attributes": {},
                "_id": "d6d5cb9b-0aa7-4378-bc8c-edc28b3f93c7",
                "uris": [
                  "/dog"
                ],
                "scopes": [
                  {
                    "name": "method:GET"
                  }
                ],
                "icon_uri": ""
              }
            ],
            "policies": [
              {
                "id": "3134be38-7c4b-43e4-9959-65dfd1709eb1",
                "name": "tata",
                "description": "",
                "type": "user",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "users": "[\"myuser\"]"
                }
              },
              {
                "id": "9be8c68c-5c11-4fb9-b60b-67c601d9805d",
                "name": "forwclient",
                "description": "",
                "type": "client",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "clients": "[\"test-client\"]"
                }
              },
              {
                "id": "f9799cad-7362-4154-9d0d-2d50b2bc822c",
                "name": "doggy",
                "description": "",
                "type": "user",
                "logic": "NEGATIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "users": "[\"myuser\"]"
                }
              },
              {
                "id": "9466b340-4a02-471d-8716-c6608a79ee33",
                "name": "test",
                "description": "",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "resources": "[\"horse\",\"pets\"]",
                  "applyPolicies": "[\"tata\"]"
                }
              },
              {
                "id": "97f37d08-4a21-4a07-9af5-d9876cc90a99",
                "name": "forward",
                "description": "",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "resources": "[\"turtle\"]",
                  "applyPolicies": "[\"forwclient\"]"
                }
              },
              {
                "id": "fbf10a23-2bef-4135-9796-b1b746561b30",
                "name": "dog",
                "description": "",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "resources": "[\"dog\"]",
                  "applyPolicies": "[\"doggy\"]"
                }
              }
            ],
            "scopes": [
              {
                "id": "434112a5-0533-4156-a8a0-a8c3a8a7f9ac",
                "name": "mymy",
                "iconUri": ""
              },
              {
                "id": "9bb4070f-5146-4328-b24d-2153b3717b48",
                "name": "method:GET",
                "iconUri": ""
              }
            ],
            "decisionStrategy": "UNANIMOUS"
          }
        },
        {
          "clientId": "test-loa",
          "name": "",
          "description": "",
          "rootUrl": "",
          "adminUrl": "",
          "baseUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "4z9PoOooXNFmSCPZx0xHXaUxX4eYGFO0",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "attributes": {
            "oidc.ciba.grant.enabled": "false",
            "oauth2.device.authorization.grant.enabled": "false",
            "client.secret.creation.time": "1729499068",
            "backchannel.logout.session.required": "true",
            "backchannel.logout.revoke.offline.tokens": "false",
            "login_theme": "",
            "display.on.consent.screen": false,
            "frontchannel.logout.url": "",
            "backchannel.logout.url": "",
            "logoUri": "",
            "policyUri": "",
            "tosUri": "",
            "access.token.signed.response.alg": "",
            "id.token.signed.response.alg": "",
            "id.token.encrypted.response.alg": "",
            "id.token.encrypted.response.enc": "",
            "user.info.response.signature.alg": "",
            "user.info.encrypted.response.alg": "",
            "user.info.encrypted.response.enc": "",
            "request.object.signature.alg": "",
            "request.object.encryption.alg": "",
            "request.object.encryption.enc": "",
            "request.object.required": "",
            "authorization.signed.response.alg": "",
            "authorization.encrypted.response.alg": "",
            "authorization.encrypted.response.enc": "",
            "exclude.session.state.from.auth.response": "",
            "exclude.issuer.from.auth.response": "",
            "use.refresh.tokens": "true",
            "client_credentials.use_refresh_token": "false",
            "token.response.type.bearer.lower-case": "false",
            "access.token.lifespan": "",
            "client.session.idle.timeout": "",
            "client.session.max.lifespan": "",
            "client.offline.session.idle.timeout": "",
            "client.offline.session.max.lifespan": "",
            "tls.client.certificate.bound.access.tokens": false,
            "dpop.bound.access.tokens": false,
            "pkce.code.challenge.method": "",
            "require.pushed.authorization.requests": "false",
            "client.use.lightweight.access.token.enabled": "false",
            "acr.loa.map": "{\"level1\":1,\"level2\":2}",
            "default.acr.values": "level1"
          },
          "authenticationFlowBindingOverrides": {
            "browser": "714d8436-409b-47cd-839f-9184ae6a09fc",
            "direct_grant": ""
          },
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ],
          "access": {
            "view": true,
            "configure": true,
            "manage": true
          },
          "authorizationServicesEnabled": false
        }
      ],
      "clientScopes": [
        {
          "id": "96698009-108e-412b-be85-10fd4a0b09e8",
          "name": "acr",
          "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "f7c429fb-7e03-4736-bdd3-8e87ef7a517c",
              "name": "acr loa level",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-acr-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "introspection.token.claim": "true",
                "access.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "5f9694e4-0695-4f31-bc52-4e23331af1f4",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "bacfd1b8-6fe7-4fb2-a1bf-7fb417019141",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "id": "07f63d45-a1f5-4b4c-951f-98f4866ef6df",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "5dffbbb4-811f-4b74-85c8-422b6af84235",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "f9e24a8b-e4bb-409f-853f-d8ef6eaf6e5e",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "54c4dc25-daae-4bba-b404-96533a0f844e",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "439460ad-ab57-4cde-94b1-1c73a6494589",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            },
            {
              "id": "02b2425f-cf05-48db-855a-73bdef0b231f",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "48c7c6af-e58d-49fe-8ecd-6ed77db74f7a",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "baf2556c-d036-4834-ae89-5620e6341369",
          "name": "test-client-template-saml",
          "description": "Client template for test",
          "protocol": "saml",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "d72238d3-630f-4284-99ee-8663f3b1fb9b",
              "name": "email",
              "protocol": "saml",
              "protocolMapper": "saml-user-property-mapper",
              "consentRequired": false,
              "config": {
                "attribute.nameformat": "Basic",
                "user.attribute": "email",
                "friendly.name": "Email address",
                "attribute.name": "email"
              }
            },
            {
              "id": "f8c062f9-4d29-4c0c-ba9e-bf2ced199df5",
              "name": "lastName",
              "protocol": "saml",
              "protocolMapper": "saml-user-property-mapper",
              "consentRequired": false,
              "config": {
                "attribute.nameformat": "Basic",
                "user.attribute": "lastName",
                "friendly.name": "Family Name",
                "attribute.name": "last_name"
              }
            },
            {
              "id": "0b03ddfb-a21f-4602-8c02-8a2bd7d8a059",
              "name": "firstName",
              "protocol": "saml",
              "protocolMapper": "saml-user-property-mapper",
              "consentRequired": false,
              "config": {
                "attribute.nameformat": "Basic",
                "user.attribute": "firstName",
                "friendly.name": "Given name",
                "attribute.name": "first_name"
              }
            },
            {
              "id": "c178f9c0-2060-4bb6-bb18-c1cfd3180530",
              "name": "groups",
              "protocol": "saml",
              "protocolMapper": "saml-user-attribute-mapper",
              "consentRequired": false,
              "config": {
                "attribute.nameformat": "Unspecified",
                "user.attribute": "scim-groups",
                "aggregate.attrs": "true",
                "friendly.name": "Groups",
                "attribute.name": "groups"
              }
            }
          ]
        },
        {
          "id": "467de229-ad84-4d69-8dc3-a63e6734cef4",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "24e872dd-5c59-4059-bb1a-6ad8b4cd234b",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "b50eb03b-909f-44ac-af17-3cf31d0653b3",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "06779c77-f236-4cc9-9aba-b025677978a9",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "b8d14a1f-e3d8-490e-8d1b-882f3eb6b4d5",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "8eb7da94-a6d6-495d-bdaf-0cb9d2f2fe8d",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "1d8961e9-7369-4388-89a1-10b0741e040f",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "id": "fe5ca81d-a3c7-4cad-808b-7b11c58f70f6",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "475959f4-0850-4784-a4dd-c68976caf106",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3ff87d91-d21c-4cfd-a1fe-17ae441aa892",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "bb979ad1-dada-4394-9dde-ebaced24e783",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            },
            {
              "id": "ebf3b702-9bda-4c76-9b8f-83fda2d9d4fd",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "07294181-4f84-48f4-9eb9-341e44e290e0",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "a9946dd5-c7cb-48bd-ac20-dd0d793970da",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4cd55afc-3b25-428c-9946-6009b911542a",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "898be6a9-93e2-482c-98a7-2e9f1cfaf638",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "id": "9bc2d0ba-7c4d-4f38-96e7-64f33674c01a",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "76f1f6d4-baea-4b7e-a4a0-96b6e5eed9a9",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "890e927e-0f09-4bdd-940c-b5ec9180da6b",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "2c961237-afbf-4b78-8fd1-5bd86c047ce4",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "73f6c862-d391-4be9-a7d0-1cf2c54ef540",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "8b8a0d39-dec2-471f-889e-652a9e9cdb8c",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "ab94bb70-fc81-49d5-813e-f65047df6cf5",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "f2666d6b-25ae-4ed6-9e6f-f226c22c7245",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "135ca049-d138-4cbd-b2aa-8ca662819c40",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "12d40a7e-f7db-4142-8ee7-4c1f98469973",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        }
      ],
      "defaultDefaultClientScopes": [
        "profile",
        "email",
        "web-origins",
        "roles",
        "role_list"
      ],
      "defaultOptionalClientScopes": [
        "phone",
        "offline_access",
        "microprofile-jwt",
        "address"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {},
      "loginTheme": "default",
      "accountTheme": "keycloak-preview",
      "eventsEnabled": false,
      "eventsListeners": [
        "metrics-listener",
        "jboss-logging"
      ],
      "enabledEventTypes": [
        "SEND_RESET_PASSWORD",
        "REMOVE_TOTP",
        "REVOKE_GRANT",
        "UPDATE_TOTP",
        "LOGIN_ERROR",
        "CLIENT_LOGIN",
        "RESET_PASSWORD_ERROR",
        "IMPERSONATE_ERROR",
        "CODE_TO_TOKEN_ERROR",
        "CUSTOM_REQUIRED_ACTION",
        "RESTART_AUTHENTICATION",
        "IMPERSONATE",
        "UPDATE_PROFILE_ERROR",
        "LOGIN",
        "UPDATE_PASSWORD_ERROR",
        "CLIENT_INITIATED_ACCOUNT_LINKING",
        "TOKEN_EXCHANGE",
        "LOGOUT",
        "REGISTER",
        "CLIENT_REGISTER",
        "IDENTITY_PROVIDER_LINK_ACCOUNT",
        "UPDATE_PASSWORD",
        "CLIENT_DELETE",
        "FEDERATED_IDENTITY_LINK_ERROR",
        "IDENTITY_PROVIDER_FIRST_LOGIN",
        "CLIENT_DELETE_ERROR",
        "VERIFY_EMAIL",
        "CLIENT_LOGIN_ERROR",
        "RESTART_AUTHENTICATION_ERROR",
        "EXECUTE_ACTIONS",
        "REMOVE_FEDERATED_IDENTITY_ERROR",
        "TOKEN_EXCHANGE_ERROR",
        "PERMISSION_TOKEN",
        "SEND_IDENTITY_PROVIDER_LINK_ERROR",
        "EXECUTE_ACTION_TOKEN_ERROR",
        "SEND_VERIFY_EMAIL",
        "EXECUTE_ACTIONS_ERROR",
        "REMOVE_FEDERATED_IDENTITY",
        "IDENTITY_PROVIDER_POST_LOGIN",
        "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
        "UPDATE_EMAIL",
        "REGISTER_ERROR",
        "REVOKE_GRANT_ERROR",
        "EXECUTE_ACTION_TOKEN",
        "LOGOUT_ERROR",
        "UPDATE_EMAIL_ERROR",
        "CLIENT_UPDATE_ERROR",
        "UPDATE_PROFILE",
        "CLIENT_REGISTER_ERROR",
        "FEDERATED_IDENTITY_LINK",
        "SEND_IDENTITY_PROVIDER_LINK",
        "SEND_VERIFY_EMAIL_ERROR",
        "RESET_PASSWORD",
        "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR",
        "REMOVE_TOTP_ERROR",
        "VERIFY_EMAIL_ERROR",
        "SEND_RESET_PASSWORD_ERROR",
        "CLIENT_UPDATE",
        "CUSTOM_REQUIRED_ACTION_ERROR",
        "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
        "UPDATE_TOTP_ERROR",
        "CODE_TO_TOKEN",
        "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR"
      ],
      "adminEventsEnabled": false,
      "adminEventsDetailsEnabled": false,
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "743ae7ae-3648-4288-ad20-4058b6cb6700",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "b5a3c258-1d5b-47bc-9cdf-cf72ae1b39e6",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "5532963e-a3ab-43a2-8837-5cc7a3df26dd",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "3057ca1c-bbb9-47f6-a802-fc13103f148b",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-role-list-mapper",
                "saml-user-property-mapper",
                "saml-user-attribute-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "oidc-address-mapper",
                "oidc-usermodel-attribute-mapper",
                "oidc-full-name-mapper"
              ]
            }
          },
          {
            "id": "a860228a-2743-42d7-91d3-a3b3527fbf00",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "4e0d90eb-8ffa-4b65-bcbb-ac0c8511bd22",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-sha256-pairwise-sub-mapper",
                "saml-user-attribute-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-address-mapper",
                "oidc-full-name-mapper",
                "oidc-usermodel-attribute-mapper",
                "saml-role-list-mapper",
                "saml-user-property-mapper"
              ]
            }
          },
          {
            "id": "1c8f8c00-80e5-467a-95dd-0a6a29060c0c",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          },
          {
            "id": "826f101c-9fa7-4e69-91b1-5a203a73d9fe",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "bdeecf6b-5007-48e7-944a-17bd7c979b6f",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "1717d6ce-121c-42ce-87b8-0629095fb7dd",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "54c9954a-6fa4-4f90-8643-47f9ff7c49c8",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": false,
      "supportedLocales": [
        ""
      ],
      "authenticationFlows": [
        {
          "id": "155f4454-afb1-40b8-af7a-4d620c009f5c",
          "alias": "1stCondition",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "Level 1",
              "authenticator": "conditional-level-of-authentication",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 0,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 1,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "24eca914-d4c1-4283-889f-c8bde0cbfa4b",
          "alias": "2ndCondition",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "Level 2",
              "authenticator": "conditional-level-of-authentication",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 0,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 1,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "70696f6a-7660-49d9-a975-dcc5efe91112",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "efbf6505-28f9-4e36-b295-c356b5fa2cdf",
          "alias": "Authflow",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 0,
              "autheticatorFlow": true,
              "flowAlias": "1stCondition",
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 1,
              "autheticatorFlow": true,
              "flowAlias": "2ndCondition",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "4e1eb3d0-f75a-4d41-a4ef-9e340a55ec4b",
          "alias": "Basic",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 0,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 1,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 2,
              "autheticatorFlow": true,
              "flowAlias": "Form",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "680350f8-46b1-4572-a845-d757868bbdaa",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "b972f106-7493-4caf-bf4a-49acf90c1d83",
          "alias": "Browser with entitlements",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 31,
              "autheticatorFlow": true,
              "flowAlias": "Basic",
              "userSetupAllowed": false
            },
            {
              "authenticator": "script-cloud-auth-entlmnts.js",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 32,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "207579fd-4e8b-4da9-bf03-c76ddbb1923c",
          "alias": "Browser with entitlements Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "ce9f3043-ebc9-4854-9f81-3243d85abea5",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "295b49da-fde7-4bc2-b102-16cc3ef15f60",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "7e64d2a1-2b5a-4483-9d95-f871831294e1",
          "alias": "Form",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 0,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 1,
              "autheticatorFlow": true,
              "flowAlias": "OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "43c91745-b4f6-4fdc-a930-44a652e56918",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "d5e1a62c-2ca6-4c7c-8d0f-27395ab3d182",
          "alias": "OTP",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 0,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 1,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "0e58c361-d2f5-4845-96fd-ad1cd5e71c7f",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "714d8436-409b-47cd-839f-9184ae6a09fc",
          "alias": "StepUp",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 0,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 1,
              "autheticatorFlow": true,
              "flowAlias": "Authflow",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "b15fa8ad-6d0e-4eba-a607-4109be3cee83",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "518a76e7-a3c9-4057-8b32-c86ef461afb6",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "89b84250-5542-420b-8887-6dbac5941eed",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "forms",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "ac428a60-9356-47d2-a4be-3f11b1d1d215",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-secret-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-x509",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "5b80f438-eb50-40e0-bd1a-8b2b8453a699",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "78ba50d5-4437-4e20-906f-7735471883b4",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "5648f30a-d61e-49f4-8cb2-f225871a4fa5",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "279398cf-e191-438f-804d-c6e27eab0373",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "1590b99d-6eb6-4b6a-86ed-62ebffe56131",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": true,
              "flowAlias": "registration form",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "c6909b1c-006c-4b2c-a3cf-de53ce0c6908",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-password-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 50,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 60,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "b4f7e048-3600-4488-a811-c102f684eac0",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-credential-email",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 40,
              "autheticatorFlow": true,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "30afbf46-4287-4c53-99b3-efb8c6bc1779",
          "alias": "reset credentials redirect",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "script-cloud-auth-303-pswd-qa.js",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 1,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "0006c81d-b9f7-4fe9-bbe3-1676a894b054",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "051b6647-48c6-4525-b63b-7782ea7403c7",
          "alias": "Level 1",
          "config": {
            "loa-condition-level": "1",
            "loa-max-age": "36000"
          }
        },
        {
          "id": "b73c80ba-b902-4860-9e98-8557d72c24fc",
          "alias": "Level 1",
          "config": {
            "loa-condition-level": "1",
            "loa-max-age": "36000"
          }
        },
        {
          "id": "6812208a-e24f-402d-87d2-8b3abb252217",
          "alias": "Level 2",
          "config": {
            "loa-condition-level": "2",
            "loa-max-age": "0"
          }
        },
        {
          "id": "9e442554-acfa-4659-bc10-73f79e4b428b",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "affce7a9-e34f-4396-9a14-ca626738e648",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "terms_and_conditions",
          "name": "Terms and Conditions",
          "providerId": "terms_and_conditions",
          "enabled": false,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": true,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        }
      ],
      "browserFlow": "browser",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials redirect",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "attributes": {
        "clientOfflineSessionMaxLifespan": "0",
        "clientSessionIdleTimeout": "0",
        "clientSessionMaxLifespan": "0",
        "clientOfflineSessionIdleTimeout": "0"
      },
      "keycloakVersion": "11.0.2",
      "userManagedAccessAllowed": false
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mock-config
data:
  mock.yaml: |
    openapi: "3.0.0"
    info:
      version: 1.0.0
      title: Swagger Petstore
      description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
      termsOfService: http://swagger.io/terms/
      contact:
        name: Swagger API Team
        email: apiteam@swagger.io
        url: http://swagger.io
      license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
    servers:
      - url: http://petstore.swagger.io/api
    paths:
      /pets:
        get:
          description: |
            Returns all pets from the system that the user has access to
            Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

            Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
          operationId: findPets
          parameters:
            - name: tags
              in: query
              description: tags to filter by
              required: false
              style: form
              schema:
                type: array
                items:
                  type: string
            - name: limit
              in: query
              description: maximum number of results to return
              required: false
              schema:
                type: integer
                format: int32
          responses:
            '200':
              description: pet response
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
                  example:
                    -
                      summary: An example of a cat
                      value:
                        id: 2
                        name: Fluffy
                    -
                      summary: An example of a dog
                      value:
                        id: 1
                        name: Spot
            default:
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
        post:
          description: Creates a new pet in the store. Duplicates are allowed
          operationId: addPet
          requestBody:
            description: Pet to add to the store
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NewPet'
          responses:
            '200':
              description: pet response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
                  examples:
                    bunny:
                      summary: An example of a bunny
                      value:
                        id: 3
                        name: bunny
            default:
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
      /pets/{id}:
        get:
          description: Returns a user based on a single ID, if the user does not have access to the pet
          operationId: find pet by id
          parameters:
            - name: id
              in: path
              description: ID of pet to fetch
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '200':
              description: pet response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
                  examples:
                    mice:
                      summary: An example of a mice
                      value:
                        id: 4
                        name: Fluffy
                        photoUrls: []
            default:
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
        delete:
          description: deletes a single pet based on the ID supplied
          operationId: deletePet
          parameters:
            - name: id
              in: path
              description: ID of pet to delete
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '204':
              description: pet deleted
            default:
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
    components:
      schemas:
        Pet:
          allOf:
            - $ref: '#/components/schemas/NewPet'
            - type: object
              required:
              - id
              properties:
                id:
                  type: integer
                  format: int64

        NewPet:
          type: object
          required:
            - name
          properties:
            name:
              type: string
            tag:
              type: string

        Error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: mock
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock
  template:
    metadata:
      labels:
        app: mock
    spec:
      containers:
        - name: mock
          image: stoplight/prism:4.6.2
          args:
            - -h
            - 0.0.0.0
            - mock
            - /tmp/mock.yaml
          ports:
            - containerPort: 4010
              name: mock

          volumeMounts:
            - name: mock-config
              mountPath: /tmp/mock.yaml
              subPath: mock.yaml
      volumes:
        - name: mock-config
          configMap:
            name: mock-config
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:26.2.3
          command: 
            - /opt/keycloak/bin/kc.sh
            - start-dev
            - --features=preview
            - --import-realm
            - --proxy-headers=xforwarded
            # - --https-certificate-file=/etc/ssl/tls.crt
            # - --https-certificate-key-file=/etc/ssl/tls.key
          env:
            - name: KEYCLOAK_USER
              value: admin
            - name: KEYCLOAK_PASSWORD
              value: admin
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              value: admin
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              value: admin
            - name: JAVA_OPTS
              value: >-
                -Dkeycloak.profile.feature.scripts=enabled
                -Dkeycloak.profile.feature.upload_scripts=enabled
                -Dkeycloak.profile.feature.account_api=enabled
                -Dkeycloak.profile.feature.account2=enabled
          ports:
            - containerPort: 8080
              name: keycloak
          livenessProbe:
            httpGet:
              path: /realms/test
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /realms/test
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          startupProbe:
            tcpSocket:
              port: keycloak
            failureThreshold: 30
            periodSeconds: 10
          volumeMounts:
            # - name: tls
            #   mountPath: "/etc/ssl"
            #   readOnly: true
            - name: keycloak-config
              mountPath: /opt/keycloak/data/import/test.json
              subPath: test.json
      volumes:
        - name: keycloak-config
          configMap:
            name: keycloak-config
        # - name: tls
        #   secret:
        #     secretName: tls
---
apiVersion: v1
kind: Service
metadata:
  name: mock
spec:
  type: ClusterIP
  ports:
    - name: mock
      port: 4010
      targetPort: 4010
      protocol: TCP
  selector:
    app: mock
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
spec:
  type: ClusterIP
  ports:
    - name: keycloak
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: keycloak
---
# apiVersion: networking.k8s.io/v1beta1 # for k3s < v1.19
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
spec:
  tls:
  - hosts:
      - localhost
    secretName: tls
  rules:
  - host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: keycloak
            port:
              number: 8080
      - path: /pets
        pathType: Prefix
        backend:
          service:
            name: mock
            port:
              number: 4010
---
apiVersion: helm.cattle.io/v1
kind: HelmChartConfig
metadata:
  name: traefik
  namespace: kube-system
spec:
  valuesContent: |-
    additionalArguments:
      - "--entryPoints.web.proxyProtocol.insecure"
      - "--entryPoints.web.forwardedHeaders.insecure"